<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS基础总结深入</title>
      <link href="/posts/JS%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E6%B7%B1%E5%85%A5/"/>
      <url>/posts/JS%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93%E6%B7%B1%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="数据类型的分类和判断"><a href="#数据类型的分类和判断" class="headerlink" title="数据类型的分类和判断"></a>数据类型的分类和判断</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li><p>基本(值)类型</p><ul><li>Number —– 任意数值 ——– typeof</li><li>String —– 任意字符串 —— typeof</li><li>Boolean —- true&#x2F;false —– typeof</li><li>undefined — undefined —– typeof&#x2F;&#x3D;&#x3D;&#x3D;</li><li>null ——– null ———- &#x3D;&#x3D;&#x3D;（typeof a时返回的是Object）</li></ul></li><li><p>对象(引用)类型</p><ul><li>Object —– typeof&#x2F;instanceof</li><li>Array —— instanceof</li><li>Function —- typeof</li></ul></li></ul><h2 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h2><h3 id="判断总结"><a href="#判断总结" class="headerlink" title="判断总结"></a>判断总结</h3><ul><li><p>typeof（返回的是类型的字符串表达）</p><p>可以判断：undefined&#x2F;数值&#x2F;字符串&#x2F;布尔值 &#x2F;function</p><p>不能区分：null与object、Array与object</p></li><li><p>instanceof</p><p>判断对象的具体（所有对象都是object类型）类型</p></li><li><p>&#x3D;&#x3D;&#x3D;</p><p>可以判断：undefined，null</p></li></ul><h3 id="undefined与null的区别"><a href="#undefined与null的区别" class="headerlink" title="undefined与null的区别"></a>undefined与null的区别</h3><ul><li>undefined代表定义未赋值</li><li>null定义并赋值了, 只是值为null</li></ul><h3 id="什么时候给变量赋值为null"><a href="#什么时候给变量赋值为null" class="headerlink" title="什么时候给变量赋值为null"></a>什么时候给变量赋值为null</h3><ul><li>初始赋值, 表明将要赋值为对象</li><li>结束前, 让对象成为垃圾对象(被垃圾回收器回收)</li></ul><h1 id="数据-变量-内存的理解"><a href="#数据-变量-内存的理解" class="headerlink" title="数据,变量, 内存的理解"></a>数据,变量, 内存的理解</h1><h2 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据?"></a>什么是数据?</h2><ul><li>在内存中可读的, 可传递的保存了特定信息的’东东’</li><li>一切皆数据, 函数也是数据</li><li>在内存中的所有操作的目标: 数据</li></ul><h2 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量?"></a>什么是变量?</h2><ul><li>在程序运行过程中它的值是允许改变的量</li><li>一个变量对应一块小内存, 它的值保存在此内存中</li></ul><h2 id="什么是内存"><a href="#什么是内存" class="headerlink" title="什么是内存?"></a>什么是内存?</h2><ul><li>内存条通电后产生的存储空间(临时的)</li><li>一块内存包含2个方面的数据<ul><li>内部存储的数据</li><li>地址值数据</li></ul></li><li>内存空间的分类<ul><li>栈空间: 全局变量和局部变量</li><li>堆空间: 对象</li></ul></li></ul><h2 id="内存-数据-变量三者之间的关系"><a href="#内存-数据-变量三者之间的关系" class="headerlink" title="内存,数据, 变量三者之间的关系"></a>内存,数据, 变量三者之间的关系</h2><ul><li>内存是容器, 用来存储不同数据</li><li>变量是内存的标识, 通过变量我们可以操作(读&#x2F;写)内存中的数据</li></ul><h2 id="引用变量赋值问题"><a href="#引用变量赋值问题" class="headerlink" title="引用变量赋值问题"></a>引用变量赋值问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1</span><br><span class="line">obj2.<span class="property">age</span> = <span class="number">12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">age</span>)  <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><ul><li>2个引用变量指向同一个对象, 通过一个变量修改对象内部数据, 另一个变量看到的是修改之后的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>: <span class="number">12</span>&#125;</span><br><span class="line"><span class="keyword">var</span> b = a</span><br><span class="line">a = &#123;<span class="attr">name</span>: <span class="string">&#x27;BOB&#x27;</span>, <span class="attr">age</span>: <span class="number">13</span>&#125;<span class="comment">//a变量指向的对象发生了改变</span></span><br><span class="line">b.<span class="property">age</span> = <span class="number">14</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">age</span>, a.<span class="property">name</span>, a.<span class="property">age</span>) <span class="comment">// 14 Bob 13</span></span><br></pre></td></tr></table></figure><ul><li>2个引用变量指向同一个对象, 让其中一个引用变量指向另一个对象, 另一引用变量依然指向前一个对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">age</span>: <span class="number">13</span>&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn2</span> (obj) &#123;</span><br><span class="line">   obj = &#123;<span class="attr">age</span>: <span class="number">15</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn2</span>(a)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">age</span>)<span class="comment">//13</span></span><br></pre></td></tr></table></figure><ul><li>js调用函数时传递变量参数时，都是值（基本&#x2F;地址值）传递。<ul><li>另外一种理解：可能是值传递, 也可能是引用传递(地址值)。</li></ul></li><li>函数调用时先将实参的内容赋给形参，此时两变量指向同一对象，函数体中形参指向的对象发生了改变，而实参依然指向原对象，且因为作用域的限制，函数执行完后无法访问形参指向的对象。</li></ul><h2 id="JS引擎如何管理内存？"><a href="#JS引擎如何管理内存？" class="headerlink" title="JS引擎如何管理内存？"></a>JS引擎如何管理内存？</h2><ul><li><p>内存生命周期</p><ul><li><p>分配小内存空间, 得到它的使用权</p></li><li><p>存储数据, 可以反复进行操作</p></li><li><p>释放小内存空间</p></li></ul></li><li><p>释放内存</p><ul><li><p>局部变量: 函数执行完自动释放</p></li><li><p>对象: 成为垃圾对象&#x3D;&#x3D;&gt;垃圾回收器回收</p></li></ul></li></ul><h1 id="对象的理解和使用"><a href="#对象的理解和使用" class="headerlink" title="对象的理解和使用"></a>对象的理解和使用</h1><h2 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象?"></a>什么是对象?</h2><ul><li>多个数据(属性)的集合</li><li>用来保存多个数据(属性)的容器</li></ul><h2 id="为什么要使用对象"><a href="#为什么要使用对象" class="headerlink" title="为什么要使用对象"></a>为什么要使用对象</h2><ul><li><p>统一管理多个数据</p></li><li><p>对象组成:</p><ul><li>属性 : 属性名（字符串）和属性值（任意）组成</li><li>方法 : 一种特别的属性（属性值是函数）</li></ul></li></ul><h2 id="如何访问内部属性"><a href="#如何访问内部属性" class="headerlink" title="如何访问内部属性"></a>如何访问内部属性</h2><ul><li>object.属性名：编码简单，有时不可用</li><li>object[‘属性名’]: 通用</li><li>必须使用[‘属性名’]方式的情况<ul><li>属性名包含特殊字符: - 空格</li><li>属性名不确定（变量）</li></ul></li></ul><h1 id="函数的理解和使用"><a href="#函数的理解和使用" class="headerlink" title="函数的理解和使用"></a>函数的理解和使用</h1><h2 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数?"></a>什么是函数?</h2><ul><li>用来实现特定功能的, n条语句的封装体</li><li>只有函数类型的数据是可以执行的, 其它的都不可以</li></ul><h2 id="为什么要用函数"><a href="#为什么要用函数" class="headerlink" title="为什么要用函数?"></a>为什么要用函数?</h2><ul><li>提高复用性</li><li>便于阅读交流</li></ul><h2 id="如何定义函数"><a href="#如何定义函数" class="headerlink" title="如何定义函数"></a>如何定义函数</h2><ul><li>函数声明</li><li>表达式</li></ul><h2 id="如何调用-执行-函数"><a href="#如何调用-执行-函数" class="headerlink" title="如何调用(执行)函数"></a>如何调用(执行)函数</h2><ul><li>test(): 直接调用（一般函数）</li><li>obj.test(): 通过对象调用（对象方法）</li><li>new test(): new调用（构造函数）</li><li>test.call&#x2F;apply(obj): 临时让test成为obj的方法进行调用</li></ul><h2 id="匿名函数自调用（IIFE）"><a href="#匿名函数自调用（IIFE）" class="headerlink" title="匿名函数自调用（IIFE）"></a>匿名函数自调用（IIFE）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">test</span> () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(++a)</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="variable language_">window</span>.<span class="property">$</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="comment">// 向外暴露一个全局函数</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">test</span>: test</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"> $().<span class="title function_">test</span>()<span class="comment">// 1. $是一个函数 2. $执行后返回的是一个对象</span></span><br></pre></td></tr></table></figure><ul><li>IIFE (Immediately Invoked Function Expression) 立即调用函数表达式</li><li>作用<ul><li>隐藏实现</li><li>不会污染外部(全局)命名空间</li><li>用它来编码js模块</li></ul></li></ul><h2 id="回调函数的理解"><a href="#回调函数的理解" class="headerlink" title="回调函数的理解"></a>回调函数的理解</h2><h3 id="什么函数才是回调函数"><a href="#什么函数才是回调函数" class="headerlink" title="什么函数才是回调函数?"></a>什么函数才是回调函数?</h3><ul><li>你定义的</li><li>你没有调用</li><li>但它最终执行了(在一定条件下或某个时刻)</li></ul><h3 id="常用的回调函数"><a href="#常用的回调函数" class="headerlink" title="常用的回调函数"></a>常用的回调函数</h3><ul><li>dom事件回调函数–用户交互</li><li>定时器回调函数</li><li>ajax请求回调函数(后面讲解)–后台交互</li><li>生命周期回调函数(后面讲解)</li></ul><h3 id="函数中的this"><a href="#函数中的this" class="headerlink" title="函数中的this"></a>函数中的this</h3><ul><li>显式指定谁: obj.xxx()</li><li>通过call&#x2F;apply指定谁调用: xxx.call(obj)</li><li>不指定谁调用: xxx()  : window</li><li>构造函数：new xxx():新创建的对象</li><li>回调函数: 看背后是通过谁来调用的: window&#x2F;其它</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS初级笔记（一）</title>
      <link href="/posts/JS%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/posts/JS%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><ol><li><p>控制浏览器弹出一个警告框   <code>alert(&quot;哥，你真帅啊！！&quot;);</code></p></li><li><p>让计算机在页面中输出一个内容 <code>document.write(&quot;看我出不出来~~&quot;);</code></p></li><li><p>向控制台输出一个内容（日志） <code>console.log(&quot;c=&quot;+c);</code></p></li><li><p>js代码编写位置：</p><ul><li><p>外部js文件，通过script标签引入，可以在不同的页面中同时引用</p><p><code>&lt;script type=&quot;javascript&quot; src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></p></li><li><p>将js代码编写到script标签</p></li><li><p>将js代码编写到标签的onclick属性中，当我们点击按钮时，js代码才会执行（结构与行为耦合，不推荐）</p></li></ul></li><li><p>JS中可以使用{}来为语句进行分组，一个{}中的语句我们称之为一个代码块。 JS中的代码块，只具有分组的作用，没有其他的用途；代码块内的内容，在外部是完全可见的。（除了函数内声明的变量）</p></li></ol><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><ol><li>JS中严格区分大小写</li><li>JS中每一条语句以；结尾</li><li>JS中自动忽略多个空格和换行。</li><li>声明变量：var age &#x3D; 80;</li><li>标识符（命名规则）<ul><li>标识符中可以含有字母、数字、_、$</li><li>标识符不能以数字开头</li><li>标识符不能是ES中的关键字或保留字</li><li>标识符一般都采用驼峰命名法（helloWorld）</li></ul></li></ol><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><mark class="hl-label green">String字符串</mark> <ul><li>在JS中字符串需要使用引号引起来；引号不能嵌套</li><li>在字符串中我们可以使用\作为转义字符，当表示一些特殊符号时可以使用\进行转义转义字符</li></ul><mark class="hl-label green">Number数值</mark> <p>在JS中所有的数值都是Number类型，包括整数和浮点数（小数）</p><ul><li>JS中可以表示的数字的最大值 <code>Number.MAX_VALUE</code></li><li>JS中可以表示的数字的最大值 <code>Number.MIN_VALUE </code>(大于0的最小值)</li><li>如果使用Number表示的数字超过了最大值，则会返回一个<ul><li>Infinity 表示正无穷</li><li>-Infinity 表示负无穷</li><li>使用typeof检查Infinity也会返回number</li></ul></li><li>NaN 是一个特殊的数字，表示Not A Number<ul><li>使用typeof检查一个NaN也会返回number</li></ul></li></ul><div class="note warning flat"><p>千万不要使用JS进行对精确度要求比较高得的运算（不准）</p></div><mark class="hl-label green">Boolean布尔值</mark> <p>true表真，false表假，主要用于做逻辑判断。</p><mark class="hl-label green">Null空值</mark> <p>null这个值专门用来表示一个为空的对象，使用typeof检查一个null值时，会返回object</p><mark class="hl-label green">Undefined未定义</mark> <p>当声明一个变量，但是并不给变量赋值时，它的值就是undefined，使用typeof检查一个undefined时也会返回undefined。</p><mark class="hl-label green">Object对象</mark> ]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LESS的简单使用</title>
      <link href="/posts/LESS%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/posts/LESS%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>暂时懒得写，等用的时候再回来整理</p>]]></content>
      
      
      <categories>
          
          <category> LESS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css初级笔记（四）</title>
      <link href="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
      <url>/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Animation"><a href="#Animation" class="headerlink" title="Animation"></a>Animation</h1><h2 id="过渡（transition）"><a href="#过渡（transition）" class="headerlink" title="过渡（transition）"></a>过渡（transition）</h2><p>通过过渡可以指定一个属性发生变化时的切换方式，创建一些非常好的效果，提升用户的体验。</p><ul><li><code>transition-property: height , width;</code><ul><li>指定要执行过渡的属性，多个属性间使用,隔开，如果所有属性都需要过渡，则使用all关键字</li><li>大部分属性都支持过渡效果，注意过渡时必须是从一个有效数值向另外一个有效数值进行过渡</li></ul></li><li><code>transition-duration: 100ms, 2s;</code><ul><li>指定过渡效果的持续时间, 时间单位：s 和 ms</li></ul></li><li><code>transition-timing-function: steps(2, start);</code><ul><li>过渡的时序函数,指定过渡执行的方式</li><li>可选值：</li><li>ease 默认值，慢速开始，先加速，再减速</li><li>linear 匀速运动</li><li>ease-in 加速运动</li><li>ease-out 减速运动</li><li>ease-in-out 先加速 后减速</li><li>cubic-bezier() 来指定时序函数（<a href="https://cubic-bezier.com/">时序函数编辑</a>）</li><li>steps() 分步执行过渡效果,可以设置第二个值来表明在时间开始还是结束来执行过渡</li></ul></li><li><code>transition-delay: 2s;</code><ul><li>过渡效果的延迟，等待一段时间后在执行过渡</li></ul></li><li><code>transition:2s margin-left 1s cubic-bezier(.24,.95,.82,-0.88);</code> <mark class="hl-label red">简写属性</mark> <ul><li>可以同时设置过渡相关的所有属性，只有一个要求，如果要写延迟，则两个时间中第一个是持续时间，第二个是延迟。</li></ul></li></ul><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h2><p>动画和过渡类似，都可以实现一些动态的效果，不同的是过渡需要在某个属性发生变化时才会触发，而动画可以自动触发动态效果。要想设置动画效果，必须先要设置一个关键帧，关键帧设置了动画执行的每一个步骤。</p><h2 id="关键帧的设置"><a href="#关键帧的设置" class="headerlink" title="关键帧的设置"></a>关键帧的设置</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> test &#123;</span><br><span class="line">      <span class="comment">/* from表示动画的开始位置 也可以使用 0% */</span></span><br><span class="line">      <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: orange;</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="comment">/* to动画的结束位置 也可以使用100%*/</span></span><br><span class="line">      <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">700px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="动画的设置"><a href="#动画的设置" class="headerlink" title="动画的设置"></a>动画的设置</h2><ul><li><code>animation-name: test;</code>  要对当前元素生效的关键帧的<strong>名字</strong></li><li><code>animation-duration: 4s;</code>  动画的<strong>执行时间</strong></li><li><code> animation-delay: 2s;</code> 动画的<strong>延时</strong></li><li><code>animation-iteration-count: 1;</code> 动画执行的<strong>次数</strong> ( infinite 无限执行)</li><li><code> animation-direction: alternate-reverse;</code>  指定动画运行的<strong>方向</strong><ul><li>normal 默认值  从 from 向 to运行 每次都是这样 </li><li>reverse 从 to 向 from 运行 每次都是这样 </li><li>alternate 从 from 向 to运行 重复执行动画时反向执行</li><li>alternate-reverse 从 to 向 from运行 重复执行动画时反向执行</li></ul></li><li><code>animation-play-state: paused;</code> 设置动画的<strong>执行状态</strong></li><li><code>animation-fill-mode: both;</code> 动画的<strong>填充模式</strong><ul><li>none 默认值 动画执行完毕元素回到原来位置</li><li>forwards 动画执行完毕元素会停止在动画结束的位置</li><li>backwards 动画延时等待时，元素就会处于开始位置</li><li>both 结合了forwards 和 backwards</li></ul></li><li><code>animation: ball .5s forwards linear infinite alternate;</code> <mark class="hl-label red">简写属性</mark> </li></ul><hr><h1 id="变形（transform）"><a href="#变形（transform）" class="headerlink" title="变形（transform）"></a>变形（transform）</h1><p> 变形就是指通过CSS来改变元素的形状或位置，它不会影响到页面的布局。</p><h2 id="平移"><a href="#平移" class="headerlink" title="平移"></a>平移</h2><p> transform 用来设置元素的变形效果 <code> transform: translateX(100%);</code> </p><ul><li>translateX() 沿着x轴方向平移</li><li>translateY() 沿着y轴方向平移</li><li>translateZ() 沿着z轴方向平移</li><li>当平移单位为百分比时，其百分比相对于自身进行计算</li></ul><p>其中z轴平移比较特殊，正常情况下z轴平移指的是调整元素在z轴的位置，即调整元素和人眼之间的距离，距离越大，元素离人越近。但因为z轴平移属于立体效果（近大远小），而默认情况下网页不支持透视，如果想要看见效果，则必须要设置网页的视距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">      <span class="comment">/* 设置当前网页的视距为800px，人眼距离网页的距离 */</span></span><br><span class="line">     <span class="attribute">perspective</span>: <span class="number">800px</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>原版视频中是在html标签上添加的perspective，经验证现已失效，设置给body则显示正常。<br>查阅文档之后，文档中给出了另一种设置方式：<code>transform: perspective(500px) translateZ(200px);</code></p></div><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>通过旋转可以使元素沿着x y 或 z旋转指定的角度 <code> transform: rotateY(180deg);</code></p><ul><li>rotateX()、rotateY()、rotateZ()</li><li>backface-visibility: hidden;(是否显示元素的背面)</li><li>与上同理，在进行x、y轴的旋转时，为了显示出3d的效果，需要设置perspective</li></ul><h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><p> 对元素进行缩放的函数 <code>transform:scale(2)</code></p><ul><li>scaleX() 水平方向缩放、scaleY() 垂直方向缩放、 scale() 双方向的缩放</li><li>transform-origin（变形的原点 默认值 center）</li></ul><div class="note info flat"><p>为了使变形的效果更加平滑，一般情况下我们会为进行变形的元素添加transition（过渡）效果</p></div><hr><h1 id="弹性盒（flex）"><a href="#弹性盒（flex）" class="headerlink" title="弹性盒（flex）"></a>弹性盒（flex）</h1><p>flex是CSS中的又一种布局手段，它主要用来代替浮动来完成页面的布局。flex可以使元素具有弹性，让元素可以跟随页面大小的改变而改变。（在原版视频发布的时候，还在担心flex的兼容性问题，现在其实flex已经很普遍了，毕竟vue压根也就不支持ie8，况且ie都已经无了😂）</p><h2 id="弹性容器"><a href="#弹性容器" class="headerlink" title="弹性容器"></a>弹性容器</h2><p>要使用弹性盒，必须先将一个元素设置为弹性容器。</p><h3 id="设置弹性容器"><a href="#设置弹性容器" class="headerlink" title="设置弹性容器"></a>设置弹性容器</h3><p><code>display: flex;</code></p><ul><li><code>display:flex</code>  设置为块级弹性容器</li><li><code>display:inline-flex</code> 设置为行内的弹性容器</li></ul><h3 id="弹性元素的排列方式"><a href="#弹性元素的排列方式" class="headerlink" title="弹性元素的排列方式"></a>弹性元素的排列方式</h3><p><code>flex-direction: row;</code></p><ul><li>row 默认值，弹性元素在容器中水平排列（左向右）- 主轴 自左向右</li><li>row-reverse 弹性元素在容器中反向水平排列（右向左）- 主轴 自右向左</li><li>column 弹性元素纵向排列（自上向下）</li><li>column-reverse 弹性元素方向纵向排列（自下向上）</li><li>我们将弹性元素的排列方向称为{label 主轴 red}；与主轴垂直的方向称为{label 侧轴 red}</li></ul><h3 id="弹性元素的换行"><a href="#弹性元素的换行" class="headerlink" title="弹性元素的换行"></a>弹性元素的换行</h3><p><code>flex-wrap: wrap-reverse;</code></p><ul><li>设置弹性元素是否在弹性容器中自动换行</li><li>nowrap 默认值，元素不会自动换行</li><li>wrap 元素沿着辅轴方向自动换行</li><li>wrap-reverse 元素沿着辅轴反方向换行</li></ul><div class="note info flat"><p><code>flex-flow: row wrap;  </code>（wrap 和 direction 的简写属性）</p></div><h3 id="主轴元素的排列"><a href="#主轴元素的排列" class="headerlink" title="主轴元素的排列"></a>主轴元素的排列</h3><p><code>justify-content: center;</code></p><ul><li><mark class="hl-label green">如何分配主轴上的空白空间</mark> （主轴上的元素如何排列）</li><li>flex-start 元素沿着主轴起边排列</li><li>flex-end 元素沿着主轴终边排列</li><li>center 元素居中排列</li><li>space-around 空白分布到元素两侧</li><li>space-between 空白均匀分布到元素间</li><li>space-evenly 空白分布到元素的单侧</li></ul><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/%E4%B8%BB%E8%BD%B4%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97.png" class="" width="528" height="97" title="主轴元素排列"><h3 id="辅轴元素的排列"><a href="#辅轴元素的排列" class="headerlink" title="辅轴元素的排列"></a>辅轴元素的排列</h3><p><code>align-content: space-between;</code></p><ul><li><mark class="hl-label green">如何分配辅轴上的空白空间</mark> 可选参数同上</li></ul><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/%E8%BE%85%E8%BD%B4%E5%85%83%E7%B4%A0%E6%8E%92%E5%88%97.png" class="" width="270" height="354" title="辅轴元素排列"><h3 id="元素在辅轴上的对齐方式"><a href="#元素在辅轴上的对齐方式" class="headerlink" title="元素在辅轴上的对齐方式"></a>元素在辅轴上的对齐方式</h3><p><code>align-items: flex-start;</code></p><ul><li>元素在辅轴上如何对齐(元素间的关系)</li><li>stretch 默认值，将元素的长度设置为相同的值(同一行所有元素长度相同)</li><li>flex-start 元素不会拉伸，沿着辅轴起边对齐</li><li>flex-end 沿着辅轴的终边对齐</li><li>center 居中对齐</li><li>baseline 基线对齐</li></ul><details class="toggle" style="border: 1px solid cadetblue"><summary class="toggle-button" style="background-color: cadetblue;">查看演示效果</summary><div class="toggle-content"><iframe src="align-items.html" width="260" height="290" frameborder="0" loading="lazy" allowfullscreen></iframe></div></details><h2 id="弹性元素"><a href="#弹性元素" class="headerlink" title="弹性元素"></a>弹性元素</h2><p> 弹性容器的子元素就是弹性元素（弹性项），弹性元素可以同时是弹性容器。</p><h3 id="弹性元素伸展和收缩的系数"><a href="#弹性元素伸展和收缩的系数" class="headerlink" title="弹性元素伸展和收缩的系数"></a>弹性元素伸展和收缩的系数</h3><p><code>flex-grow: 2;</code></p><ul><li>flex-grow 指定弹性元素的伸展的系数</li><li>当父元素有多余的空间时，子元素如何伸展，父元素的剩余空间，会按照比例进行分配</li></ul><p><code>flex-shrink</code></p><ul><li>指定弹性元素的收缩系数， 当父元素中的空间不足以容纳所有的子元素时，如何对子元素进行收缩</li></ul><h3 id="元素基础长度"><a href="#元素基础长度" class="headerlink" title="元素基础长度"></a>元素基础长度</h3><p><code>flex-basis: auto;</code></p><ul><li>flex-basis 指定的是元素在主轴上的基础长度，如果主轴是横向的则该值指定的就是元素的宽度； 如果主轴是纵向的则该值指定的是就是元素的高度。</li><li>默认值是 auto，表示参考元素自身的高度或宽度，如果传递了一个具体的数值，则以该值为准</li></ul><h3 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h3><p><code>flex: 0 1 auto</code></p><ul><li>flex 可以设置弹性元素所有的三个样式(增长、缩减、基础)</li><li>系统预设立了三种情况，可以直接使用 <code> flex: initial;</code><ul><li>initial “flex: 0 1 auto”</li><li>auto  “flex: 1 1 auto”</li><li>none “flex: 0 0 auto” 弹性元素没有弹性</li></ul></li></ul><hr><h1 id="移动端开发"><a href="#移动端开发" class="headerlink" title="移动端开发"></a>移动端开发</h1><h2 id="像素"><a href="#像素" class="headerlink" title="像素"></a>像素</h2><p>屏幕是由一个个发光的小点构成，这一个个的小点就是{}像素。我们常说的分辨率：1920 x 1080 说的就是屏幕中小点的数量。在前端开发中像素要分成两种情况讨论：CSS像素 和 物理像素，上述所说的小点就属于物理像素，而css像素指的是编写网页时我们所用的像素。浏览器在显示网页时，需要将CSS像素转换为物理像素然后再进行呈现，一个css像素最终由几个物理像素显示由浏览器决定：默认情况下在pc端，一个css像素 &#x3D; 一个物理像素。</p><h2 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h2><h3 id="视口分类"><a href="#视口分类" class="headerlink" title="视口分类"></a>视口分类</h3><blockquote><p>视口就是屏幕中用来显示网页的区域，在移动端，我们将视口分成三种情况：</p><ul><li>布局视口（layout viewport）<ul><li>作为开发人员，当我们在pc端进行布局时会相对于默认的980px（实际上不同的浏览器默认值可能不同）进行布局，这个默认980px的视口称之为布局视口</li><li><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/%E5%B8%83%E5%B1%80%E8%A7%86%E5%8F%A3.png" class="" width="189" height="171" title="布局视口"></li></ul></li><li>视觉视口（visual layout）<ul><li>如果默认情况下，我们按照980px显示内容，那么右侧有一部分区域 就会无法显示，所以手机端浏览器会默认对页面进行<strong>缩放</strong>以显示到用 户的可见区域中</li><li>那么显示在<strong>可见区域</strong>的这个视口，就是<strong>视觉视口</strong>（visual viewport）</li><li><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/%E8%A7%86%E8%A7%89%E8%A7%86%E5%8F%A3.png" class="" width="189" height="171" title="视觉视口"></li></ul></li><li>理想视口（ideal layout）<ul><li>我们通过对layout viewport进行宽度和缩放的设置，以满足正常在一个移动端窗口的布局；<strong>就是布局视口和视觉视口的大小相同</strong></li></ul></li><li><a href="https://blog.csdn.net/m0_51636525/article/details/124468206">点击原博客地址查看全文</a></li></ul></blockquote><h3 id="像素比"><a href="#像素比" class="headerlink" title="像素比"></a>像素比</h3><p>我们可以通过查看视口的大小，来观察CSS像素和物理像素的比值。</p><ul><li>默认情况下： 视口宽度1920px（CSS像素）、1920px（物理像素）， 此时，css像素和物理像素的比是 1:1</li><li>放大两倍的情况：视口宽度960px（CSS像素）、1920px（物理像素）， 此时，css像素和物理像素的比是1:2</li><li>我们可以通过改变视口的大小，来改变CSS像素和物理像素的比值</li></ul><p>在不同的屏幕，单位像素的大小是不同的，像素越小屏幕会越清晰。智能手机的像素点远远小于计算机的像素点， 默认情况下，移动端的网页都会将视口设置为980像素（<mark class="hl-label red">css像素</mark> ），以确保pc端网页可以在移动端正常访问，但是如果网页的宽度超过了980，移动端的浏览器会自动对网页缩放以完整显示网页，所以基本大部分的pc端网站都可以在移动端中正常浏览，但是往往都不会有一个好的体验，为了解决这个问题，大部分网站都会专门为移动端设计网页。</p><p> 每一款移动设备设计时，都会有一个最佳的像素比， 一般我们只需要将像素比设置为该值即可得到一个最佳效果，将像素比设置为最佳像素比的视口大小我们称其为完美视口（即上面所说的理想视口）。</p><mark class="hl-label green">将网页的视口设置为完美视口</mark> <p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></p><ul><li>结论：以后再写移动端的页面，就把上边这个玩意先写上</li><li>当然一般情况下我们使用IDE自动生成的代码中会自动包含此部分</li><li>这行代码起到了两个作用，直接作用是使得布局视口和视觉视口的大小相同；间接作用是使得网页达到最佳的显示效果</li></ul><div class="note info flat"><p>实际上我们不用关心设备的物理像素为多少，当我们获取device-width时，获取的是css像素表示的设备宽度，而不是真实的物理像素，这个像素值就是根据最佳像素比进行设置的。</p></div><h2 id="移动端单位"><a href="#移动端单位" class="headerlink" title="移动端单位"></a>移动端单位</h2><p> 由于不同设备视口和像素比不同，所以同样的375个像素在不同的设备下意义是不一样的，比如在iphone6中 375就是全屏，而到了plus中375就会缺一块，所以在移动端开发时，就不能再使用px来进行布局了。</p><mark class="hl-label green">vw表示的是视口的宽度</mark> <ul><li>100vw &#x3D; 一个视口的宽度</li><li>1vw &#x3D; 1%视口宽度</li><li>vw这个单位永远相当于视口宽度进行计算</li><li>创建一个 48px x 35px 大小的元素（<mark class="hl-label green">显示页面与设计图的一个对应关系</mark> ）<ul><li>100vw &#x3D; 750px(设计图的像素) 0.1333333333333333vw &#x3D; 1px</li><li>6.4vw &#x3D; 48px(设计图像素)</li><li>4.667vw &#x3D; 35px</li></ul></li></ul><mark class="hl-label green">rem表示的单个字体的大小</mark> <ul><li><p>1 rem &#x3D; 1 html的字体大小</p></li><li><p>在html标签中设置字体大小<code>font-size: 5.3333vw;</code>（40px）</p></li><li><p>其他属性设置时则参照字体大小进行设置：像素值&#x2F;40 rem</p></li></ul><h2 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h2><p> 网页可以根据不通的设备或窗口大小呈现出不同的效果，使用响应式布局，可以使一个网页适用于所有设备。 响应布局的关键就是<strong>媒体查询</strong>，通过媒体查询，可以为不同的设备，或设备不同的状态来分别设置样式。</p><p>语法： @media 查询规则{}</p><ul><li><p>媒体类型</p><ul><li>all 所有设备</li><li>print 打印设备</li><li>screen 带屏幕的设备</li><li>speech 屏幕阅读器</li><li>可以使用,连接多个媒体类型，这样它们之间就是一个或的关系</li></ul></li><li><p>媒体特性</p><ul><li><p>width 视口的宽度、 height 视口的高度</p></li><li><p>min-width 视口的最小宽度（视口大于指定宽度时生效）</p></li><li><p>max-width 视口的最大宽度（视口小于指定宽度时生效）</p></li><li><p>样式切换的分界点，我们称其为断点，也就是网页的样式会在这个点时发生变化</p><p>一般比较常用的断点</p><ul><li>小于768 超小屏幕 max-width&#x3D;768px</li><li>大于768 小屏幕  min-width&#x3D;768px</li><li>大于992 中型屏幕 min-width&#x3D;992px</li><li>大于1200 大屏幕  min-width&#x3D;1200px</li></ul></li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">500px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">700px</span>)&#123;</span><br><span class="line">     <span class="selector-tag">body</span>&#123;</span><br><span class="line">       <span class="attribute">background-color</span>: <span class="number">#bfa</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​      </p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css初级笔记（三）</title>
      <link href="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="浮动（float）"><a href="#浮动（float）" class="headerlink" title="浮动（float）"></a>浮动（float）</h1><p>通过浮动可以使一个元素向其父元素的左侧或右侧移动</p><div class="tabs" id="float"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#float-1">属性</button></li><li class="tab"><button type="button" data-href="#float-2">特点</button></li><li class="tab"><button type="button" data-href="#float-3">简单总结</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="float-1"><h3 id="使用float属性来设置元素的浮动"><a href="#使用float属性来设置元素的浮动" class="headerlink" title="使用float属性来设置元素的浮动"></a>使用float属性来设置元素的浮动</h3><p><strong>可选值</strong>：</p><ul><li>none 默认值 ，元素不浮动</li><li>left 元素向左浮动</li><li>right 元素向右浮动</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="float-2"><h3 id="浮动的特点："><a href="#浮动的特点：" class="headerlink" title="浮动的特点："></a>浮动的特点：</h3><ol><li>浮动元素会完全脱离文档流，不再占据文档流中的位置</li><li>元素下边的还在文档流中的元素会自动向上移动</li><li>设置浮动以后元素会向父元素的左侧或右侧移动</li><li>浮动元素向左或向右移动时，不会从父元素中移出，也不会超过它前边的其他浮动元素</li><li>如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移</li><li>浮动元素不会超过它上边的浮动的兄弟元素，最多最多就是和它一样高</li><li>元素设置浮动以后，水平布局的等式便不需要强制成立</li><li>浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="float-3"><p> 浮动目前来讲它的主要作用就是让页面中的元素可以水平排列，通过浮动可以制作一些<mark class="hl-label red">水平方向的布局</mark>    </p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="浮动带来的问题"><a href="#浮动带来的问题" class="headerlink" title="浮动带来的问题"></a>浮动带来的问题</h2><p>在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动后会完全脱离文档流，其将会无法撑起父元素的高度，导致父元素的高度丢失，然后其下的元素会自动上移，导致页面的布局混乱。这个问题我们称之为<mark class="hl-label red">高度塌陷</mark> 。高度塌陷是浮动布局中比较常见的一个问题，这个问题我们必须要进行处理！</p><div class="tabs" id="解决方案"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#解决方案-1">BFC</button></li><li class="tab"><button type="button" data-href="#解决方案-2">clear</button></li><li class="tab"><button type="button" data-href="#解决方案-3">最终解决方案</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="解决方案-1"><h3 id="BFC-Block-Formatting-Context-块级格式化环境"><a href="#BFC-Block-Formatting-Context-块级格式化环境" class="headerlink" title="BFC(Block Formatting Context) 块级格式化环境"></a>BFC(Block Formatting Context) 块级格式化环境</h3><ul><li><p>BFC是一个CSS中的一个隐含的属性，我们可以为一个元素开启BFC，开启BFC该元素会变成一个独立的布局区域</p></li><li><p>元素开启BFC后的特点：</p><ul><li>开启BFC的元素不会被浮动元素所覆盖</li><li>开启BFC的元素子元素和父元素外边距不会重叠（解决外边距重叠问题 ）</li><li>开启BFC的元素可以包含浮动的子元素（主要解决本处问题）</li></ul></li><li><p>可以通过一些特殊方式来开启元素的BFC：</p><ul><li>设置元素的浮动（不推荐）<ul><li>解决高度塌陷问题，但是其会脱离文档流，丢失元素宽度（脱离文档流后默认由内容撑开宽度），布局下面的元素会上移。</li></ul></li><li>将元素设置为行内块元素（不推荐）<ul><li>行内块不适合作为外部的容器，且其元素宽度也会丢失</li></ul></li><li>将元素的overflow设置为一个非visible的值（常用）<ul><li>常用的方式：为父元素设置 <mark class="hl-label red">overflow:hidden</mark>  开启其BFC 以使其可以包含浮动元素</li></ul></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-2"><ul><li><p>设置两个块级元素box1、box2，当设置了box1的浮动，导致box2位置上移时，我们认为是box2受到了box1浮动的影响，位置发生了改变。</p></li><li><p>如果我们不希望某个元素因为其他元素浮动的影响而改变其位置，可以通过clear属性来清除浮动元素对当前元素所产生的影响。</p></li><li><p><strong>clear</strong></p><ul><li><p>作用：清除浮动元素对当前元素所产生的影响</p></li><li><p>可选值：</p><ul><li>left 清除左侧浮动元素对当前元素的影响</li><li>right 清除右侧浮动元素对当前元素的影响</li><li>both 清除两侧中最大影响的那侧</li></ul></li><li><p>原理：设置清除浮动以后，浏览器会自动为元素添加一个上外边距， 以使其位置不受其他元素的影响</p></li></ul></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="解决方案-3"><p>我们在父元素中新建一个块元素，并利用clear属性使其免受另一子元素的浮动影响，则新建块元素会存在于其下面（本身并未浮动），所以父元素会将其包裹，这样高度就不会塌陷。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box1</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>: block;<span class="comment">/*默认创建的伪元素为行内元素*/</span></span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前我们说到解决外边距重叠时，要么不用外边距，要么不相邻；同样可以使用这种方式解决、</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">clearfix 这个样式可以同时解决高度塌陷和外边距重叠的问题，</span></span><br><span class="line"><span class="comment">当你在遇到这些问题时，直接使用clearfix这个类即可 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="定位（position）"><a href="#定位（position）" class="headerlink" title="定位（position）"></a>定位（position）</h1><p>通过定位我们可以将元素摆放到页面的任意位置</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><p><strong>使用position属性来设置定位</strong></p><p><strong>可选值</strong>：</p><ul><li>static 默认值，元素是静止的没有开启定位</li><li>relative 开启元素的相对定位</li><li>absolute 开启元素的绝对定位</li><li>fixed 开启元素的固定定位</li><li>sticky 开启元素的粘滞定位</li></ul><h2 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h2><ul><li><p>当元素的position属性值设置为relative时则开启了元素的相对定位</p></li><li><p>偏移量（offset）</p><p>当元素开启了定位以后，可以通过偏移量来设置元素的位置</p><ul><li><p>top：定位元素和定位位置上边的距离</p></li><li><p>bottom：定位元素和定位位置下边的距离</p><div class="note info flat"><p>定位元素垂直方向的位置由top和bottom两个属性控制；通常情况下只会使用其中一个</p><p>top值越大，定位元素越向下移动；bottom值越大，定位元素越向上移动</p></div></li><li><p>left：定位元素和定位位置的左侧距离</p></li><li><p>right：定位元素和定位位置的右侧距离</p><div class="note info flat"><p>定位元素水平方向的位置由left和right两个属性控制，通常情况下只会使用其中一个</p><p>left越大元素越靠右；right越大元素越靠左</p></div></li></ul></li><li><p>相对定位的特点：</p><ul><li>元素开启相对定位以后，如果不设置偏移量元素不会发生任何的变化</li><li>相对定位是参照于元素在文档流中的位置进行定位的(box左上，<mark class="hl-label green">距离原始位置的变动</mark> )</li><li>相对定位会提升元素的层级</li><li><mark class="hl-label green">相对定位不会使元素脱离文档流</mark> </li><li>相对定位不会改变元素的性质，块还是块，行内还是行内</li></ul></li></ul><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><ul><li>当元素的position属性值设置为absolute时，则开启了元素的绝对定位</li><li>包含块( containing block )<ul><li>正常情况下：包含块就是离当前元素最近的祖先块元素</li><li>绝对定位的包含块：包含块就是离它最近的开启了定位的祖先元素， 如果所有的祖先元素都没有开启定位则根元素（html）就是它的包含块</li></ul></li><li>绝对定位的特点：<ul><li>开启绝对定位后，如果不设置偏移量元素的位置不会发生变化</li><li><mark class="hl-label green">开启绝对定位后，元素会从文档流中脱离</mark> </li><li>绝对定位会改变元素的性质，行内变成块，块的宽高被内容撑开</li><li>绝对定位会使元素提升一个层级</li><li>绝对定位元素是相对于<mark class="hl-label green">其包含块</mark> 进行定位的</li></ul></li></ul><h2 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h2><ul><li>将元素的position属性设置为fixed则开启了元素的固定定位</li><li>固定定位也是一种绝对定位，所以固定定位的大部分特点都和绝对定位一样</li><li>唯一不同的是固定定位永远参照于浏览器的视口（浏览器的可视窗口）进行定位，固定定位的元素不会随网页的滚动条滚动</li></ul><details class="toggle" style="border: 1px solid cadetblue"><summary class="toggle-button" style="background-color: cadetblue;">查看定位效果</summary><div class="toggle-content"><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/GIF.gif" class="" title="固定定位"></div></details><h2 id="粘滞定位"><a href="#粘滞定位" class="headerlink" title="粘滞定位"></a>粘滞定位</h2><ul><li><p>当元素的position属性设置为sticky时则开启了元素的粘滞定位</p></li><li><p>粘滞定位和相对定位的特点基本一致，不同的是粘滞定位可以在元素到达某个位置时（与父元素的相对位置）将其固定。</p></li><li><p>类似于相对定位relative和固定定位fixed的结合；它主要用在对scroll事件的监听上；简单来说，在滑动过程中，某个元素距离其父元素的距离达到sticky粘性定位的要求时(比如top：100px)；position:sticky这时的效果相当于fixed定位，固定到适当位置。</p></li></ul><details class="toggle" style="border: 1px solid cadetblue"><summary class="toggle-button" style="background-color: cadetblue;">查看定位效果</summary><div class="toggle-content"><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/GIF_1.gif" class="" title="粘滞定位"></div></details><h1 id="绝对定位元素的布局"><a href="#绝对定位元素的布局" class="headerlink" title="绝对定位元素的布局"></a>绝对定位元素的布局</h1><p>当我们开启了绝对定位后， 水平方向的布局等式就需要添加left 和 right 两个值，此时规则和之前一样只是多添加了两个值：</p><div class="note default flat"><p>left + margin-left + border-left + padding-left + width + padding-right + border-right + margin-right + right &#x3D; 包含块的内容区的宽度</p></div><p><strong>当发生过度约束</strong>：</p><ul><li><p>如果9个值中没有 auto 则自动调整right值以使等式满足</p></li><li><p>如果有auto，则自动调整auto的值以使等式满足</p></li><li><p>可设置auto的值:margin width left right</p></li><li><p>因为left 和 right的值默认是auto，所以如果不指定left和right。则等式不满足时，会自动调整这两个值</p></li></ul> <mark class="hl-label green">垂直方向布局的等式的也必须要满足：</mark> （与之前盒模型不同）<div class="note default flat"><p>top + margin-top&#x2F;bottom + padding-top&#x2F;bottom + border-top&#x2F;bottom + height &#x3D; 包含块的高度</p></div><h1 id="元素的层级"><a href="#元素的层级" class="headerlink" title="元素的层级"></a>元素的层级</h1><p>对于开启了定位的元素，可以通过z-index属性来指定元素的层级，z-index需要一个整数作为参数，值越大元素的层级越高，元素越优先显示。</p><p>如果元素的层级一样，则优先显示靠下的元素；祖先的元素的层级再高也不会盖住后代元素。</p><p>一般情况下我们在宏观上使用浮动，具体微调的时候使用定位。</p><hr><h1 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h1><h2 id="字体相关的样式"><a href="#字体相关的样式" class="headerlink" title="字体相关的样式"></a>字体相关的样式</h2><ol><li><p>color 用来设置字体的颜色</p></li><li><p>font-size 字体的大小</p><ul><li>单位：px、em（相当于当前元素的一个font-size）、rem （相对于根元素的一个font-size）</li></ul></li><li><p>font-weight 字重 字体的加粗 </p><ul><li>normal （默认值 不加粗） 、bold （加粗）、100-900 九个级别（没什么用）</li></ul></li><li><p>font-style 字体的风格</p><p>normal 正常的、italic 斜体</p></li><li><p>font-family 字体族（字体的格式）</p></li></ol><ul><li>可选值：serif（衬线字体）、sans-serif（ 非衬线字体）、 monospace（等宽字体）</li><li>指定字体的类别，浏览器会自动使用该类别下的字体，一般情况下上述字体作为字体族最后一个作为兜底。</li><li>font-family 可以同时指定多个字体，多个字体间使用,隔开，字体生效时优先使用第一个，第一个无法使用则使用第二个，以此类推。</li><li>当指定用户电脑上并未安装的字体时，其不会生效，通过下述属性使用户可以直接使用服务器中的字体。</li><li>用户电脑会先将服务器中指定的字体下载，存在一定的网络问题，若网速比较慢，则网页的字体一开始不会正确显示。</li><li>font-face指定的字体提供给用户使用，要注意受到了授权。</li></ul>  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="comment">/* 指定字体的名字 */</span></span><br><span class="line">  <span class="attribute">font-family</span>:<span class="string">&#x27;myfont&#x27;</span> ;</span><br><span class="line">  <span class="comment">/* 服务器中字体的路径 */</span></span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;./font/ZCOOLKuaiLe-Regular.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>);</span><br><span class="line">  <span class="comment">/* format(&quot;truetype&quot;) 保险措施，一般情况下系统可以自动识别 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">      <span class="attribute">font-family</span>: myfont</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>要注意所使用字体的版权问题！</p></div><ol start="4"><li><p>行高（line height）</p><p>行高指的是文字占有的实际高度，可以通过line-height来设置行高。 </p><ul><li>行高可以直接指定一个大小（px、em），也可以直接为行高设置一个整数，如果是一个整数的话，行高将会是字体大小的指定倍数。</li><li>行高经常还用来设置文字的行间距：行间距 &#x3D; 行高 - 字体大小</li><li>我们可以将行高设置为和高度一样的值，使单行文字在一个元素中垂直居中</li></ul><p><strong>字体框</strong></p><ul><li>字体框就是字体存在的格子，设置font-size实际上就是在设置字体框的高度</li><li>行高会在字体框的上下平均分配</li></ul></li><li><mark class="hl-label red">字体的简写属性</mark> <p>font 可以设置字体相关的所有属性</p><p><strong>语法：</strong></p><ul><li>font: 字体大小&#x2F;行高 字体族（行高可以省略不写，如果不写使用默认值）</li><li>示例：font: bold italic 50px&#x2F;2  微软雅黑, ‘Times New Roman’, Times, serif;</li></ul></li></ol><h2 id="图标字体（iconfont）"><a href="#图标字体（iconfont）" class="headerlink" title="图标字体（iconfont）"></a>图标字体（iconfont）</h2><p>在网页中经常需要使用一些图标，可以通过图片来引入图标，但是图片大小本身比较大，并且非常的不灵活（颜色、大小）。所以在使用图标时，我们还可以将图标直接设置为字体， 然后通过font-face的形式来对字体进行引入，这样我们就可以通过使用字体的形式来使用图标。</p><h3 id="fontawesome"><a href="#fontawesome" class="headerlink" title="fontawesome"></a>fontawesome</h3><p>fontawesome是一个公共的图标字体库，我们要想使用它，首先要在<a href="https://fontawesome.com/">官网</a>（英文官网，中文官网版本比较旧）下载字体库，解压到本地之后，文档中存在很多文件，我们只需要将css和webfonts移动到项目中的同一目录下。然后将all.css或者all.min.css引入到网页中<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;./fa/css/all.css&quot;&gt;</code>，之后直接使用图标字体即可。</p><p><strong>使用方式：</strong></p><ul><li><p>直接通过类名使用图标字体</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-bell-slash&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-accessible-icon&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fa-bell-slash属于图标字体名（同上面font-face定义内容），前面是fas或者fab（同上面p定义内容，将图标字体指定为字体族，只有这两种免费使用），将如果其中一种不生效记得换另一种试试。</p></li><li><p>通过实体来使用图标字体 </p><p> <code>&lt;span class=&quot;fas&quot;&gt;&amp;#xf0f3;&lt;/span&gt;</code> 其中f0f3为字体的编码。</p></li><li><p>通过伪元素来设置图标字体</p><ol><li><p>找到要设置图标的元素通过before或after选中</p></li><li><p>在content中设置字体的编码（通过文档查看）</p></li><li><p>设置字体的样式</p><ul><li><p>fab：font-family: ‘Font Awesome 5 Brands’;</p></li><li><p>fas： font-family: ‘Font Awesome 5 Free’;</p><p>​          font-weight: 900;</p></li></ul></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">li::before&#123;</span><br><span class="line">      content: &#x27;\f1b0&#x27;;</span><br><span class="line">      /* font-family: &#x27;Font Awesome 5 Brands&#x27;; */</span><br><span class="line">      font-family: &#x27;Font Awesome 5 Free&#x27;;</span><br><span class="line">      font-weight: 900; </span><br><span class="line">      color: blue;</span><br><span class="line">      margin-right: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="阿里的字体库（iconfont）"><a href="#阿里的字体库（iconfont）" class="headerlink" title="阿里的字体库（iconfont）"></a>阿里的字体库（iconfont）</h3><details class="toggle" style="border: 1px solid cadetblue"><summary class="toggle-button" style="background-color: cadetblue;">查看下载过程和使用方式</summary><div class="toggle-content"><div class="flink"> <div class="flink-list">          <div class="flink-list-item">            <a href="https://zhuanlan.zhihu.com/p/438121005" title="知乎专栏" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://pic3.zhimg.com/v2-c79c1ac29162b786198d7d70199e2a24_l.jpg?source=32738c0c2x" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="知乎专栏" />              </div>              <div class="flink-item-name">知乎专栏</div>               <div class="flink-item-desc" title="阿里矢量库用作图标字体">阿里矢量库用作图标字体</div>            </a>          </div></div></div></div></details><h1 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h1><div class="tabs" id="文本样式"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#文本样式-1">text-align</button></li><li class="tab"><button type="button" data-href="#文本样式-2">vertical-align</button></li><li class="tab"><button type="button" data-href="#文本样式-3">text-decoration</button></li><li class="tab"><button type="button" data-href="#文本样式-4">white-space</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="文本样式-1"><p>文本的水平对齐，可选值：</p><ul><li><p>left 左侧对齐</p></li><li><p>right 右对齐</p></li><li><p>center 居中对齐</p></li><li><p>justify 两端对齐</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文本样式-2"><p>元素垂直对齐的方式。可选值：</p><ul><li>baseline 默认值 基线对齐</li><li>top 顶部对齐</li><li>bottom 底部对齐</li><li>middle 居中对齐</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文本样式-3"><p>设置文本修饰，可选值：</p><ul><li>none 什么都没有</li><li>underline 下划线</li><li>line-through 删除线</li><li>overline 上划线</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="文本样式-4"><p>设置网页如何处理空白。可选值：</p><ul><li>normal 正常（当文字超过父元素设置的宽度时，自动换行）</li><li>nowrap 不换行</li><li>pre 保留空白</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><hr><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h2><ul><li><code>background-color: #bfa;</code></li></ul><h2 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h2><ul><li><code>background-image: url(&quot;./img/1.png&quot;);</code><ul><li>可以同时设置背景图片和背景颜色，这样背景颜色将会成为图片的背景色</li><li>如果背景的图片小于元素，则背景图片会自动在元素中平铺将元素铺满</li><li>如果背景的图片大于元素，将会有部分背景无法完全显示</li><li>如果背景图片和元素一样大，则会直接正常显示</li></ul></li></ul><h2 id="背景的重复方式"><a href="#背景的重复方式" class="headerlink" title="背景的重复方式"></a>背景的重复方式</h2><ul><li><code>background-repeat: no-repeat;</code></li><li>repeat 默认值 ， 背景会沿着x轴 y轴双方向重复</li><li>repeat-x 沿着x轴方向重复</li><li>repeat-y 沿着y轴方向重复</li><li>no-repeat 背景图片不重复</li></ul><h2 id="背景图片的位置"><a href="#背景图片的位置" class="headerlink" title="背景图片的位置"></a>背景图片的位置</h2><ul><li><code> background-position: -50px 300px;</code><ul><li>通过 top left right bottom center 几个表示方位的词来设置背景图片的位置<ul><li>使用方位词时必须要同时指定两个值，如果只写一个则第二个默认就是center</li></ul></li><li>通过<mark class="hl-label green">偏移量</mark> 来指定背景图片的位置<ul><li>水平方向的偏移量 垂直方向变量</li></ul></li></ul></li></ul><h2 id="背景图片的偏移量计算的原点"><a href="#背景图片的偏移量计算的原点" class="headerlink" title="背景图片的偏移量计算的原点"></a>背景图片的偏移量计算的原点</h2><ul><li><code>background-origin: border-box;</code><ul><li>padding-box 默认值，background-position从内边距处开始计算</li><li>content-box 背景图片的偏移量从内容区处计算</li><li>border-box 背景图片的变量从边框处开始计算</li></ul></li></ul><h2 id="背景的范围"><a href="#背景的范围" class="headerlink" title="背景的范围"></a>背景的范围</h2><ul><li><code>background-clip: content-box;</code><ul><li>border-box 默认值，背景会出现在边框的下边</li><li>padding-box 背景不会出现在边框，只出现在内容区和内边距</li><li>content-box 背景只会出现在内容区</li></ul></li></ul><h2 id="背景图片的大小"><a href="#背景图片的大小" class="headerlink" title="背景图片的大小"></a>背景图片的大小</h2><ul><li><code>background-size: contain;</code><ul><li>第一个值表示宽度 ,第二个值表示高度,如果只写一个，则第二个值默认是 auto</li><li>cover 图片的比例不变，将元素铺满</li><li>contain 图片比例不变，将图片在元素中完整显示</li></ul></li></ul><h2 id="背景图片是否跟随元素移动"><a href="#背景图片是否跟随元素移动" class="headerlink" title="背景图片是否跟随元素移动"></a>背景图片是否跟随元素移动</h2><ul><li><code>background-attachment: fixed;</code><ul><li>scroll 默认值 背景图片会跟随元素移动</li><li>fixed 背景会固定在页面中，不会随元素移动</li></ul></li></ul><h2 id="背景相关的简写属性"><a href="#背景相关的简写属性" class="headerlink" title="背景相关的简写属性"></a>背景相关的简写属性</h2><ul><li><code> background: url(&#39;./img/2.jpg&#39;) #bfa  center center/contain border-box content-box no-repeat ;</code><ul><li>所有背景相关的样式都可以通过该样式来设置 ,并且该样式没有顺序要求，也没有哪个属性是必须写的</li><li>background-size必须写在background-position的后边，并且使用&#x2F;隔开</li><li>background-origin background-clip 两个样式 ，orgin要在clip的前边</li></ul></li></ul><h2 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h2><ul><li><p><code>background-image: linear-gradient(red 50px,yellow 100px, green 120px, orange 200px);</code></p><p><code> background-image: repeating-linear-gradient(to right ,red, yellow 50px);</code></p><ul><li>通过渐变可以设置一些复杂的背景颜色，可以实现从一个颜色向其他颜色过渡的效果</li><li>渐变是图片，需要通过background-image来设置</li><li>linear-gradient() –线性渐变，颜色沿着一条直线发生变化;repeating-linear-gradient()–可以平铺的线性渐变</li><li>渐变可以同时指定多个颜色，多个颜色默认情况下平均分布，也可以手动指定渐变的分布情况，指定颜色分布的起始位置</li><li>线性渐变的开头，我们可以指定一个渐变的方向(to left、to right等)</li></ul><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/%E6%B8%90%E5%8F%98.png" class="" title="渐变"></li><li><p><code> background-image: radial-gradient(farthest-corner at 100px 100px, red , #bfa)</code> </p><ul><li>径向渐变(放射性的效果)， 默认情况下径向渐变的形状根据元素的形状来计算的，正方形 –&gt; 圆形，长方形 –&gt; 椭圆形</li><li>我们也可以自己指定渐变的位置。radial-gradient(大小 at 位置, 颜色 位置 ,颜色 位置 ,颜色 位置)<ul><li>大小： circle 圆形、 ellipse 椭圆、closest-side 近边 、 closest-corner 近角、farthest-side 远边、farthest-corner 远角</li><li>位置： top right left center bottom</li></ul></li></ul><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/%E5%BE%84%E5%90%91%E6%B8%90%E5%8F%98.png" class="" width="276" height="267" title="径向渐变"></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css初级笔记（二）</title>
      <link href="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="文档流（normal-flow）"><a href="#文档流（normal-flow）" class="headerlink" title="文档流（normal flow）"></a>文档流（normal flow）</h1><p>网页实际是一个多层的结构，一层摞着一层，开发人员通过css来分别为每一层设置样式，而作为用户来讲只能看到最顶上一层。在这些层中，最底下的一层称为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列。所以对于我们来说元素主要有两种状态：在文档流中和不在文档流中（<mark class="hl-label red">脱离文档流</mark> ）。</p><p>元素在文档流中的特点：</p><ul><li><strong>块元素</strong><ul><li>块元素会在页面中独占一行(自上向下垂直排列)</li><li>默认宽度是父元素的全部（会把父元素撑满）</li><li>默认高度是被内容撑开（子元素）</li></ul></li><li><strong>行内元素</strong><ul><li>行内元素不会独占页面的一行，只占自身的大小</li><li>行内元素在页面中自左向右水平排列，如果一行中不能容纳下所有的行内元素，则元素会换到第二行继续自左向右排列（与书写习惯一致）</li><li>行内元素的默认宽度和高度都是被内容撑开</li></ul></li><li>行内块元素<ul><li>行内块元素不会独占页面的一行</li><li>行内块元素的默认宽度和高度都是被内容撑开</li><li>但是行内块元素的宽度、高度、行高、内外边距都可以手动进行设置</li></ul></li></ul><p>元素脱离文档流的特点：</p><ul><li><p>块元素：</p><ul><li><p>块元素不再独占页面的一行</p></li><li><p>脱离文档流以后，块元素的宽度和高度默认都被内容撑开</p></li></ul></li><li><p>行内元素：</p><ul><li>行内元素脱离文档流以后会变成块元素，特点和块元素一样</li></ul></li><li><p>脱离文档流以后，不需要再区分块和行内了</p></li></ul><hr><h1 id="盒模型（box-model）"><a href="#盒模型（box-model）" class="headerlink" title="盒模型（box model）"></a>盒模型（box model）</h1><p>​CSS将页面中的所有元素都设置为了一个矩形的盒子，将元素设置为矩形的盒子后，对页面的布局就变成将不同的盒子摆放到不同的位置，每一个盒子都由以下几个部分组成：内容区（content）、内边距（padding）、边框（border）、外边距（margin）。</p><img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/box-model.png" class="" title="盒模型"><h2 id="内容区（content）"><a href="#内容区（content）" class="headerlink" title="内容区（content）"></a>内容区（content）</h2><ul><li>元素中所有的子元素和文本内容都在内容区中排列  </li><li>内容区的大小由width 和 height两个属性来设置</li><li>width 设置内容区的宽度，height 设置内容区的高度</li></ul><h2 id="边框（border）"><a href="#边框（border）" class="headerlink" title="边框（border）"></a>边框（border）</h2><ul><li><p>边框属于盒子边缘，边框里边属于盒子内部，出了边框则属于盒子的外部</p></li><li><mark class="hl-label blue">边框的大小会影响到整个盒子的大小</mark> </li><li><p>要设置边框，需要至少设置三个样式：边框的宽度（border-width）、边框的颜色（border-color）、边框的样式 （border-style）。</p><ul><li>这三种样式都可以用来指定四个方向的边框</li></ul><p>​       值的情况</p><p>​            四个值：上 右 下 左(顺时针)</p><p>​            三个值：上 左右 下</p><p>​            两个值：上下 左右</p><p>​            一个值：上下左右</p><ul><li>当然一般我们也不会这么蛋疼，都是四个方向统一设置，故可以通过简写属性同时设置边框的所有相关样式，且没有顺序要求。</li><li>eg：border: 10px red solid;</li></ul></li></ul><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><ul><li>内容区和边框之间的距离是内边距</li><li>一共有四个方向的内边距：padding-top、padding-right、padding-bottom、padding-left</li><li>padding 内边距的简写属性，可以同时指定四个方向的内边距，规则和border-width 一样</li><li><mark class="hl-label blue">内边距的设置会影响到盒子的大小</mark> </li><li>内容区的背景颜色会延伸到内边距上</li></ul><div class="note info flat"><p>一个盒子可见框的大小，由内容区、内边距和边框共同决定，所以在计算盒子大小时，需要将这三个区域加到一起计算。</p></div><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><ul><li><mark class="hl-label blue">外边距不会影响盒子可见框的大小</mark> ，但是会影响盒子的位置</li><li>一共有四个方向的外边距：margin-top、margin-right、margin-bottom、margin-left</li><li>margin的简写属性， 可以同时设置四个方向的外边距 ，用法和padding一样</li><li>元素在页面中是按照自左向右的顺序排列的，所以默认情况下如果我们设置的左和上外边距则会移动元素自身，而设置下和右外边距会移动其他元素。</li></ul><div class="note info flat"><p>默认情况下设置margin-right不会产生任何效果(默认情况它总是被浏览器所修改的值)，此处涉及盒子的水平布局，如果不理解可以先跳过，等看完下一节内容再来回看。</p></div><h2 id="盒子尺寸"><a href="#盒子尺寸" class="headerlink" title="盒子尺寸"></a>盒子尺寸</h2><p>默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定，我们可以使用box-sizing 来设置盒子尺寸的计算方式（设置width和height的作用）</p><ul><li>content-box 默认值，宽度和高度用来设置内容区的大小</li><li>border-box 宽度和高度用来设置整个盒子可见框的大小<ul><li>width和 height指的是内容区、内边距和边框的总大小</li></ul></li></ul><h2 id="行内元素的盒模型"><a href="#行内元素的盒模型" class="headerlink" title="行内元素的盒模型"></a>行内元素的盒模型</h2><p>1.<strong>特点</strong>：</p><ul><li><p>行内元素不支持设置宽度和高度</p></li><li><p>行内元素可以设置padding，但是垂直方向padding不会影响页面的布局</p></li><li><p>行内元素可以设置border，垂直方向的border不会影响页面的布局</p></li><li><p>行内元素可以设置margin，垂直方向的margin不会影响布局</p></li></ul><p>2.我们可以使用<strong>disply属性</strong>来设置元素显示的类型（display: block;）</p><ul><li>inline 将元素设置为行内元素</li><li>block 将元素设置为块元素</li><li>inline-block 将元素设置为行内块元素 （既可以设置宽度和高度又不会独占一行）</li><li>table 将元素设置为一个表格</li><li>none 元素不在页面中显示</li></ul><p>3.我们还可以使用<strong>visibility</strong>来设置元素的显示状态（visibility: hidden;）</p><ul><li>visible 默认值，元素在页面中正常显示</li><li>hidden 元素在页面中隐藏不显示，但是依然占据页面的位置</li></ul><hr><h1 id="盒子的水平布局"><a href="#盒子的水平布局" class="headerlink" title="盒子的水平布局"></a>盒子的水平布局</h1><p><strong>元素在其父元素中水平方向的位置由以下几个属性共同决定（自左向右）：</strong></p><p>margin-left、border-left、padding-left、width、padding-right、border-right、margin-right</p><p><strong>一个元素在其父元素中，水平布局必须要满足以下的等式：</strong></p><p>margin-left + border-left + padding-left + width + padding-right + border-right + margin-right &#x3D; 其父元素内容区的宽度</p><p>以上等式必须满足，如果相加结果使等式不成立，则称为过度约束，等式会自动调整</p><p>1.调整的情况：</p><ul><li>如果这七个值中没有为 auto 的情况，则浏览器会自动调整margin-right值以使等式满足。</li><li>这七个值中有三个值可以设置为auto：width、margin-left、margin-right，若其中某个值为auto，则等式会调整其值来使等式成立。</li></ul><p>2.举例说明</p><ul><li>设置width为200px，父元素width为800px: 0 + 0 + 0 + 200 + 0 + 0 + 0 &#x3D; 800<ul><li>则会自动调整margin-right：0 + 0 + 0 + 200 + 0 + 0 + 600 &#x3D; 800</li></ul></li><li>初始设置：100 + 0 + 0 + 200 + 0 + 0 + 400 &#x3D; 800<ul><li>则会自动调整margin-right：100 + 0 + 0 + 200 + 0 + 0 + 500 &#x3D; 800</li></ul></li><li>初始设置：0 + 0 + 0 + auto + 0 + 0 + 0 &#x3D; 800  ；则自动调整auto &#x3D; 800（width）</li><li>初始设置：auto + 0 + 0 + 200 + 0 + 0 + auto &#x3D; 800   ；则自动调整auto &#x3D; 300（margin-left、margin-right）</li></ul><p>3.多个auto自动调整说明</p><ul><li>如果宽度和其他属性设置为auto，则自动调整宽度，其他属性置为0。</li><li>如果将两个外边距设置为auto，宽度固定值，则会将两外边距设置为相同值。</li></ul><div class="note info flat"><p>我们经常利用这个特点来使一个元素在其父元素中水平居中：</p><p>width:xxxpx;</p><p>margin:0 auto;</p></div><h1 id="垂直方向的布局"><a href="#垂直方向的布局" class="headerlink" title="垂直方向的布局"></a>垂直方向的布局</h1><p> 默认情况下父元素的高度被内容撑开，子元素是在父元素的内容区中排列的，如果子元素的大小超过了父元素，则子元素会从父元素中溢出，我们使用 overflow 属性来设置父元素如何处理溢出的子元素。</p><mark class="hl-label green">overflow:auto</mark> <ul><li>visible，(默认值 )子元素会从父元素中溢出，在父元素外部的位置显示</li><li>hidden 溢出内容将会被裁剪不会显示</li><li>scroll 生成两个滚动条，通过滚动条来查看完整的内容</li><li>auto 根据需要生成滚动条</li></ul><h2 id="垂直外边距的重叠（折叠）"><a href="#垂直外边距的重叠（折叠）" class="headerlink" title="垂直外边距的重叠（折叠）"></a>垂直外边距的重叠（折叠）</h2><p>相邻的垂直方向外边距会发生重叠现象</p><ol><li><p>兄弟元素</p><ul><li><p>兄弟元素间的相邻垂直外边距会取两者之间的较大值（两者都是正值）</p></li><li><p>特殊情况：如果相邻的外边距一正一负，则取两者的和；</p><p>​如果相邻的外边距都是负值，则取两者中绝对值较大的。</p></li><li><p>兄弟元素之间的外边距的重叠，对于开发是有利的，所以我们不需要进行处理。</p></li></ul></li><li><p>父子元素</p><ul><li>父子元素间相邻外边距，子元素的会传递给父元素（上外边距），连带着父元素一起移动。</li><li>父子外边距的折叠会影响到页面的布局，必须要进行处理</li><li>解决方式：要么不用外边距，要么不相邻</li></ul></li></ol><h1 id="一些其他的样式"><a href="#一些其他的样式" class="headerlink" title="一些其他的样式"></a>一些其他的样式</h1><h2 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h2><p>通常情况，浏览器都会为元素设置一些默认样式，这些样式的存在会影响到页面的布局，一般我们编写网页时必须要去除浏览器的默认样式（PC端的页面）</p><p>重置样式表：专门用来对浏览器的样式进行重置的</p><ul><li><p>reset.css 直接去除了浏览器的默认样式</p></li><li><p>normalize.css 对默认样式进行了统一</p></li></ul><p><a href="https://pan.baidu.com/s/1nBGai3NUw4--z_fkdbUA0w">获取重置样式表文件 </a>提取码: 7aev</p><h2 id="轮廓、圆角和阴影"><a href="#轮廓、圆角和阴影" class="headerlink" title="轮廓、圆角和阴影"></a>轮廓、圆角和阴影</h2><div class="tabs" id="css"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#css-1">轮廓</button></li><li class="tab"><button type="button" data-href="#css-2">圆角</button></li><li class="tab"><button type="button" data-href="#css-3">阴影</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="css-1"><p>outline 用来设置元素的轮廓线，用法和border一模一样</p><ul><li>轮廓和边框不同的点，就是轮廓不会影响到可见框的大小</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="css-2"><p>border-radius: 用来设置圆角 （圆角设置的圆的半径大小）</p><ul><li>border-radius 可以分别指定四个角的圆角</li></ul><p>​          四个值： 左上 右上 右下 左下</p><p>​          三个值： 左上 右上&#x2F;左下 右下 </p><p>​          两个值： 左上&#x2F;右下 右上&#x2F;左下</p><p>​  border-radius: 20px 50%;<img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/yuanjiao.png" class="" title="圆角"></p><ul><li>将元素设置为一个圆形：border-radius: 50%;</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="css-3"><p>box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局</p><ul><li>第一个值 水平偏移量 设置阴影的水平位置 正值向右移动 负值向左移动</li><li>第二个值 垂直偏移量 设置阴影的水平位置 正值向下移动 负值向上移动</li><li>第三个值 阴影的模糊半径</li><li>第四个值 阴影的颜色</li></ul><p>box-shadow: 0px 0px 50px rgba(0, 0, 0, .3) ; <img src="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/shadow.png" class="" title="阴影"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css初级笔记（一）</title>
      <link href="/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/posts/css%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><p>实践中优先外部样式表、平时练习可以使用内部样式表<code>&lt;style&gt;&lt;/style&gt;</code> </p></div><hr><h1 id="语法组成："><a href="#语法组成：" class="headerlink" title="语法组成："></a>语法组成：</h1><p>css的基本语法分为两部分：选择器和声明块。</p><ul><li><strong>选择器</strong>：通过选择器可以选中页面中的指定元素，比如 p 的作用就是选中页面中所有的p元素</li><li><strong>声明块</strong>：通过声明块来指定要为元素设置的样式<ul><li>声明块由一个一个的声明组成</li><li>声明是一个名值对结构，一个样式名对应一个样式值，名和值之间以:连接，以;结尾</li></ul></li></ul><hr><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="常用选择器"><a href="#常用选择器" class="headerlink" title="常用选择器"></a>常用选择器</h2><ul><li><strong>元素（标签）选择器</strong><ul><li>作用：根据标签名来选中指定的元素</li><li>语法：标签名{}</li><li>例子：p{}、h1{}、div{}</li></ul></li><li><strong>id选择器</strong><ul><li>作用：根据元素的id属性值选中一个元素</li><li>语法：#id属性值{}</li><li>例子：#box{}   #red{}</li></ul></li><li><strong>类选择器</strong><ul><li>作用：根据元素的class属性值选中一组元素</li><li>语法：.class属性值</li><li>例子：.abc{}  .circle{}</li></ul></li><li><strong>通配选择器</strong><ul><li>作用：选中页面中的所有元素</li><li>语法: *</li></ul></li></ul><h2 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h2><ul><li><p><strong>交集选择器</strong></p><ul><li>作用：选中同时符合多个条件的元素</li><li>语法：选择器1选择器2选择器3选择器n{}</li></ul><div class="note warning flat"><p>注意：交集选择器中如果有元素选择器，必须使用元素选择器开头  </p></div></li><li><p><strong>选择器分组（并集选择器）</strong></p><ul><li>作用：同时选择多个选择器对应的元素</li><li>语法：选择器1,选择器2,选择器3,选择器n{}</li><li>例子：#b1,.p1,h1,span,div.red{}</li></ul></li></ul><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><ul><li><p><strong>子元素选择器</strong></p><ul><li>作用：选中指定父元素的指定子元素</li><li>语法：父元素 &gt; 子元素</li><li>例子：div.box &gt; span</li></ul></li><li><p><strong>后代元素选择器</strong></p><ul><li>作用：选中指定元素内的指定后代元素</li><li>语法：祖先  后代</li><li>例子：div span</li></ul></li><li><p><strong>兄弟元素选择器</strong></p><ul><li><p>选择后一个兄弟元素：前一个 + 下一个</p><p>p + span</p></li><li><p>选择后边所有的兄弟元素：兄 ~ 弟</p><p>p ~ span</p></li></ul></li></ul><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul><li><p>语法：      [属性名] 选择含有指定属性的元素</p><p>​      [属性名&#x3D;属性值] 选择含有指定属性和属性值的元素</p><p>​      [属性名^&#x3D;属性值] 选择属性值以指定值开头的元素</p><p>​      [属性名$&#x3D;属性值] 选择属性值以指定值结尾的元素</p><p>​      [属性名*&#x3D;属性值] 选择属性值中含有某值的元素的元素</p></li><li><p>对应示例：  p[title]</p><p>​     p[title&#x3D;abc]</p><p>​     p[title^&#x3D;abc]</p><p>​     p[title$&#x3D;abc]</p><p>​ p[title^&#x3D;abc]</p></li></ul><h2 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h2><ul><li><p>伪类用来描述一个元素的<mark class="hl-label red">特殊状态</mark> ，比如：第一个子元素、被点击的元素、鼠标移入的元素。。。</p></li><li><p>一般情况伪类下都是使用 : 开头</p><ul><li>:first-child第一个子元素</li><li>:last-child     最后一个子元素</li><li>:nth-child()   选中第n个子元素(参数为2n或者even时表示选中偶数位的元素；参数为2n+1或者odd时表示选中奇数位的元素)</li></ul><div class="note info flat"><p>以上这些伪类都是根据所有的子元素进行排序</p></div><ul><li>:first-of-type、:last-of-type、:nth-of-type()</li></ul><div class="note info flat"><p>这几个伪类的功能和上述的类似，不同点是他们是在同类型元素中进行排序</p></div><ul><li>:not()    否定伪类，将符合条件的元素从选择器中去除</li><li><strong>a元素的伪类</strong><ul><li>:link 用来表示没访问过的链接（正常的链接）</li><li>:visited 用来表示访问过的链接</li><li>:hover 用来表示鼠标移入的状态</li><li>:active 用来表示鼠标点击的状态</li></ul></li></ul></li></ul><h2 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h2><ul><li><p>伪元素用来表示页面中一些特殊的并不真实存在的元素（即<mark class="hl-label red">特殊的位置</mark> ）</p></li><li><p>伪元素一般使用 :: 开头</p><ul><li>::first-letter 表示第一个字母</li><li>::first-line 表示第一行</li><li>::selection 表示选中的内容</li><li>::before 元素的开始</li><li>::after 元素的最后</li></ul><div class="note info flat"><p>before 和 after 必须结合content属性来使用</p></div></li><li><p>更多伪类&#x2F;元素的用法请参考(<a href="https://www.w3cschool.cn/cssref/53s812dp.html">CSS 选择器</a>)</p></li></ul><h2 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h2><p>当我们通过不同的选择器，选中相同的元素，并且为相同的样式设置不同的值时，此时就发生了样式的冲突。当发生样式冲突时，应用哪个样式则由选择器的权重（优先级）所决定。</p><p><strong>选择器的权重</strong></p><table><thead><tr><th align="left">选择器</th><th>优先级</th></tr></thead><tbody><tr><td align="left">内联样式（直接将css代码放在标签内）</td><td>1,0,0,0</td></tr><tr><td align="left">id选择器</td><td>0,1,0,0</td></tr><tr><td align="left">类和伪类选择器</td><td>0,0,1,0</td></tr><tr><td align="left">元素选择器</td><td>0,0,0,1</td></tr><tr><td align="left">通配选择器</td><td>0,0,0,0</td></tr><tr><td align="left">继承的样式</td><td>没有优先级</td></tr></tbody></table><ul><li>比较优先级时，需要将所有选择器的优先级进行相加计算，最后优先级越高，则越优先显示（分组选择器是单独计算的），选择器的累加不会超过其最大的数量级，类选择器再高也不会超过id选择器，如果优先级计算后相同，此时则优先使用靠下的样式。</li><li>可以在某一个样式的后边添加 !important ，则此时该样式会获取到最高的优先级，甚至超过内联样式，但是实际开发中不建议使用。</li></ul><hr><h1 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h1><h2 id="样式的继承"><a href="#样式的继承" class="headerlink" title="样式的继承"></a>样式的继承</h2><p>我们在为一个元素设置样式时同时也会应用到它的后代元素上。</p><ul><li>继承是发生在祖先和后代之间的</li><li>继承的设计是为了方便我们的开发，利用继承我们可以将一些通用的样式统一设置到共同的祖先元素上，这样只需设置一次即可让所有的元素都具有该样式。</li></ul><div class="note warning flat"><p>并不是所有的样式都会被继承，比如背景相关的，布局相关等的这些样式都不会被继承。具体哪些样式会被继承请查阅css手册内容</p></div><h2 id="长度单位"><a href="#长度单位" class="headerlink" title="长度单位"></a>长度单位</h2><ul><li><strong>像素</strong>：屏幕（显示器）实际上是由一个一个的小方块构成的，不同屏幕的像素大小不同，像素越小的屏幕显示的效果越清晰。 所以同样的200px在不同的设备下显示效果并不相同。</li><li><strong>百分比</strong>：可以将属性值设置为相对于其父元素属性的百分比，这样可以使子元素跟随父元素的改变而改变。</li><li><strong>em</strong>：em是相对于元素的字体大小来计算的，1em &#x3D; 1font-size（默认为16）；em会根据字体大小的改变而改变</li><li><strong>rem</strong>：rem是相对于根元素(html)的字体大小来计算。（在进行手机端开发时常用）</li></ul><h2 id="颜色单位"><a href="#颜色单位" class="headerlink" title="颜色单位"></a>颜色单位</h2><ul><li><strong>颜色名</strong>：在CSS中可以直接使用颜色名来设置各种颜色，比如：red、orange、yellow、blue、green … …，但是这种方式不太方便，也不太灵活。</li><li><strong>RGB值</strong>：RGB通过三种颜色的不同浓度来调配出不同的颜色，每一种颜色的范围在 0 - 255 (0% - 100%) 之间；语法：RGB(红色,绿色,蓝色)</li><li><strong>RGBA</strong>：在rgb的基础上增加了一个a表示不透明度，1表示完全不透明  0表示完全透明  .5半透明。</li><li><strong>十六进制的RGB值</strong>：颜色浓度通过 00-ff表示，语法：#红色绿色蓝色</li></ul><div class="note info flat"><p>如果颜色两位两位重复可以进行简写，eg：#aabbcc –&gt; #abc</p></div><ul><li>HSL值 HSLA值（不常用）<ul><li>H 色相(0 - 360)（圆环)</li><li>S 饱和度，颜色的浓度 0% - 100%</li><li>L 亮度，颜色的亮度 0% - 100%</li></ul></li></ul><div class="note info flat"><p>碍于文章篇幅，这里声明块只列了几种，其实自选择器往下，包括后续的所有内容都属于声明块，即对选择到的页面元素的样式进行修改。</p></div>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html初级笔记</title>
      <link href="/posts/html%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0/"/>
      <url>/posts/html%E5%88%9D%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h1><h2 id="网页结构："><a href="#网页结构：" class="headerlink" title="网页结构："></a>网页结构：</h2><ul><li><p>结构-HTML</p></li><li><p>表现-CSS</p></li><li><p>行为-JavaScript</p></li></ul><h2 id="HTML页面的基本结构："><a href="#HTML页面的基本结构：" class="headerlink" title="HTML页面的基本结构："></a>HTML页面的基本结构：</h2><p>​文档声明、标签、属性、注释</p><hr><h1 id="HTML："><a href="#HTML：" class="headerlink" title="HTML："></a>HTML：</h1><h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><p>​    在HTML中有些时候，我们不能直接书写一些特殊符号。比如：多个连续的空格，比如字母两侧的大于和小于号。如果我们需要在网页中书写这些特殊的符号，则需要使用html中的实体（转义字符）。</p><p><strong>实体的语法</strong>：&amp;实体的名字;</p><ul><li>&amp;nbsp; 空格</li><li>&amp;gt; 大于号</li><li>&amp;lt; 小于号</li><li>&amp;copy; 版权符号</li></ul><h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签:"></a>meta标签:</h2><p>用于设置网页中的一些元数据，展示给浏览器看的内容。</p><ul><li><p>charset 指定网页的字符集<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p></li><li><p>name 指定的数据的名称、content 指定的数据的内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;网上购物,网上商城&quot;</span>/&gt;</span> </span><br><span class="line"><span class="comment">&lt;!--网页关键字，作为搜索引擎搜索时依据的关键词 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;京东JD.COM-专业的综合网上购物商城&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--网站的描述,作为搜索结果的相关描述，会显示在搜索引擎的搜索的结果中 --&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>title 网站被搜索引擎检索时的标题 <code>&lt;title&gt;Document&lt;/title&gt;</code></p></li></ul><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签:"></a>语义化标签:</h2><h2 id="块元素"><a href="#块元素" class="headerlink" title="块元素"></a>块元素</h2><p>h1~h6、p</p><h2 id="行内元素"><a href="#行内元素" class="headerlink" title="行内元素"></a>行内元素</h2><p>em、q(短引用)、blockquote（长引用）、a（超链接）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span>（不常用：兼容性一般）</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>(常用)  </span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>ul&gt;li 无序</p></li><li><p>ol&gt;li 有序</p></li><li><p>dl&gt;dt 定义列表</p></li></ul><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;.html or url&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>（新页面）&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- href=&quot;#(顶端)、#(id)跳转到指定地方&quot; --&gt;</span>          </span><br></pre></td></tr></table></figure><h2 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/1.gif&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;松鼠&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>src: 图片路径</p></li><li><p>alt：图片的描述，默认情况下不会显示，有些浏览器会在图片无法加载时显示<br>          搜索引擎会根据alt中的内容来识别图片，如果不写alt属性则图片不会被搜索引擎所收录</p></li><li><p>图片的格式：jpg、gif、png、webp、base64 。效果一样，用小的；效果不一样，用效果好的。</p></li></ul><h2 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h2><p>用于向当前页面中引入一个其他页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.qq.com&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>src : 指定要引入的网页的路径</li><li>frameborder : 指定内联框架的边框</li></ul><h2 id="音视频"><a href="#音视频" class="headerlink" title="音视频"></a>音视频</h2><p>用来向页面中引入一个外部的音频文件<br><strong>属性</strong>：</p><ul><li><p>controls 是否允许用户控制播放</p><ul><li>autoplay 音频文件是否自动播放<ul><li>如果设置了autoplay ,则音乐在打开页面时会自动播放</li><li>但是目前来讲大部分浏览器都不会自动对音乐进行播放</li></ul></li></ul></li><li><p>loop 音乐是否循环播放 </p>   <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对不起，您的浏览器不支持播放音频！请升级浏览器！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 老版本支持的标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">embed</span> <span class="attr">src</span>=<span class="string">&quot;./source/audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mp3&quot;</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">height</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>在现实生活中，我们经常需要使用表格来表示一些格式化数据：课程表、人名单、成绩单….， 同样在网页中我们也需要使用表格，我们通过table标签来创建一个表格。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span><span class="comment">&lt;!-- 头部 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!-- 在table中使用tr表示表格中的一行，有几个tr就有几行 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span><span class="comment">&lt;!-- 主体 --&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="comment">&lt;!-- 在tr中使用td表示一个单元格，有几个td就有几个单元格 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span><span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span><span class="comment">&lt;!-- 底部 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><code>&lt;td rowspan=&quot;2&quot;&gt;&lt;/td&gt;</code>:纵向合并单元格</p></li><li><p><code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>:横向合并单元格</p></li><li><p>border-spacing: 指定边框之间的距离（css样式）</p></li><li><p>border-collapse: collapse; 设置边框的合并（css样式）</p></li><li><p>如果表格中没有使用tbody而是直接使用tr，那么浏览器会自动创建一个tbody，并且将tr全都放到tbody中。tr并不是table的子元素</p></li><li><p>默认情况下元素在td中是垂直居中的，table的单元格内元素垂直居中可以利用vertical-align 来设置。</p></li><li><p>设置垂直居中的一种方式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: table-cell;<span class="comment">/* 将元素设置为单元格 td  */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br></pre></td></tr></table></figure></li></ul><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>在现实生活中表单用于提交数据，同样在网页中也可以使用表单，网页中的表单用于将本地的数据提交给远程的服务器，我们使用form标签来创建一个表单。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;target.html&quot;</span>&gt;</span> <span class="comment">&lt;!-- action 表单要提交的服务器的地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span>文本框 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码框 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">value</span>=<span class="string">&quot;a&quot;</span> <span class="attr">checked</span>&gt;</span>单选按钮 </span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;test&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>多选框</span><br><span class="line">    <span class="comment">&lt;!-- 下拉列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;haha&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;i&quot;</span>&gt;</span>选项一<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span> <span class="attr">value</span>=<span class="string">&quot;ii&quot;</span>&gt;</span>选项二<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提交按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>注意：文本框和密码框必须指定name属性</li><li>选择框必须要指定一个value属性，value属性最终会作为用户填写的值传递给服务器<ul><li>checked 可以将单选按钮设置为默认选中</li><li>选择框必须指定name和value值才能向服务器传入数据</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   input的其他属性：</span></span><br><span class="line"><span class="comment">        autocomplete=&quot;off&quot; 关闭自动补全</span></span><br><span class="line"><span class="comment">        readonly 将表单项设置为只读，数据会提交</span></span><br><span class="line"><span class="comment">        disabled 将表单项设置为禁用，数据不会提交</span></span><br><span class="line"><span class="comment">        autofocus 设置表单项自动获取焦点</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;按钮&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​     </p><p>​     </p>]]></content>
      
      
      <categories>
          
          <category> 前端三剑客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
